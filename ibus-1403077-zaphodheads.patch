--- ibus-1.3.4/bus/engineproxy.c.zaphod	2010-04-22 16:36:16.000000000 +0900
+++ ibus-1.3.4/bus/engineproxy.c	2018-02-26 22:15:47.980098081 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2018 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -334,6 +335,9 @@ bus_engine_proxy_real_destroy (BusEngine
         engine->keymap = NULL;
     }
 
+    g_free (engine->display_name);
+    engine->display_name = NULL;
+
     IBUS_OBJECT_CLASS(bus_engine_proxy_parent_class)->destroy (IBUS_OBJECT (engine));
 }
 
@@ -650,19 +654,41 @@ bus_engine_proxy_process_key_event (BusE
 }
 
 void
-bus_engine_proxy_set_cursor_location (BusEngineProxy *engine,
-                                      gint            x,
-                                      gint            y,
-                                      gint            w,
-                                      gint            h)
-{
-    g_assert (BUS_IS_ENGINE_PROXY (engine));
+bus_engine_proxy_set_cursor_location (BusEngineProxy     *engine,
+                                      gint                x,
+                                      gint                y,
+                                      gint                w,
+                                      gint                h,
+                                      IBusCursorLocation *cursor)
+{
+    const gchar *display_name = NULL;
+    g_assert (BUS_IS_ENGINE_PROXY (engine));
+
+    if (cursor) {
+        display_name = ibus_cursor_location_get_display_name (cursor);
+        cursor = g_object_ref (cursor);
+    } else {
+        display_name = "";
+        cursor = ibus_cursor_location_new ("x", x, "y", y,
+                                           "width", w, "height", h,
+                                           "display-name", display_name,
+                                           NULL);
+    }
 
-    if (engine->x != x || engine->y != y || engine->w != w || engine->h != h) {
+    if (engine->x != x || engine->y != y || engine->w != w || engine->h != h ||
+        g_strcmp0 (engine->display_name, display_name) != 0) {
         engine->x = x;
         engine->y = y;
         engine->w = w;
         engine->h = h;
+        g_free (engine->display_name);
+        engine->display_name = g_strdup (display_name);
+
+        ibus_proxy_call ((IBusProxy *) engine,
+                         "SetCursorObject",
+                         IBUS_TYPE_CURSOR_LOCATION, &cursor,
+                         G_TYPE_INVALID);
+
         ibus_proxy_call ((IBusProxy *) engine,
                          "SetCursorLocation",
                          G_TYPE_INT, &x,
@@ -671,6 +697,8 @@ bus_engine_proxy_set_cursor_location (Bu
                          G_TYPE_INT, &h,
                          G_TYPE_INVALID);
     }
+
+    g_object_unref (cursor);
 }
 
 void
--- ibus-1.3.4/bus/engineproxy.h.zaphod	2010-04-22 16:36:16.000000000 +0900
+++ ibus-1.3.4/bus/engineproxy.h	2018-02-26 12:25:01.172973645 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2017 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -58,6 +59,7 @@ struct _BusEngineProxy {
     gint y;
     gint w;
     gint h;
+    gchar *display_name;
 
     IBusEngineDesc *desc;
     IBusKeymap     *keymap;
@@ -87,7 +89,9 @@ void             bus_engine_proxy_set_cu
                                                      gint            x,
                                                      gint            y,
                                                      gint            w,
-                                                     gint            h);
+                                                     gint            h,
+                                                     IBusCursorLocation
+                                                                    *cursor);
 void             bus_engine_proxy_focus_in          (BusEngineProxy *engine);
 void             bus_engine_proxy_focus_out         (BusEngineProxy *engine);
 void             bus_engine_proxy_reset             (BusEngineProxy *engine);
--- ibus-1.3.4/bus/inputcontext.c.zaphod	2010-05-27 11:42:49.000000000 +0900
+++ ibus-1.3.4/bus/inputcontext.c	2018-02-26 22:15:42.471108350 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2018 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -210,13 +211,14 @@ bus_input_context_class_init (BusInputCo
             G_SIGNAL_RUN_LAST,
             0,
             NULL, NULL,
-            ibus_marshal_VOID__INT_INT_INT_INT,
+            ibus_marshal_VOID__INT_INT_INT_INT_OBJECT,
             G_TYPE_NONE,
-            4,
+            5,
             G_TYPE_INT,
             G_TYPE_INT,
             G_TYPE_INT,
-            G_TYPE_INT);
+            G_TYPE_INT,
+            IBUS_TYPE_CURSOR_LOCATION);
 
     context_signals[FOCUS_IN] =
         g_signal_new (I_("focus-in"),
@@ -533,6 +535,11 @@ bus_input_context_destroy (BusInputConte
         context->client = NULL;
     }
 
+    if (context->cursor) {
+        g_object_unref (context->cursor);
+        context->cursor = NULL;
+    }
+
     IBUS_OBJECT_CLASS(bus_input_context_parent_class)->destroy (IBUS_OBJECT (context));
 }
 
@@ -565,6 +572,9 @@ _ibus_introspect (BusInputContext   *con
         "      <arg name=\"w\" direction=\"in\" type=\"i\"/>\n"
         "      <arg name=\"h\" direction=\"in\" type=\"i\"/>\n"
         "    </method>\n"
+        "    <method name=\"SetCursorObject\">\n"
+        "      <arg name=\"cursor\" direction=\"in\" type=\"v\"/>\n"
+        "    </method>\n"
         "    <method name=\"FocusIn\"/>\n"
         "    <method name=\"FocusOut\"/>\n"
         "    <method name=\"Reset\"/>\n"
@@ -785,19 +795,76 @@ _ic_set_cursor_location (BusInputContext
     context->y = y;
     context->h = h;
     context->w = w;
+    if (context->cursor)
+        g_object_unref (context->cursor);
+    context->cursor = NULL;
+
+    if (context->has_focus && context->enabled && context->engine) {
+        bus_engine_proxy_set_cursor_location (context->engine,
+                                              x, y, w, h, NULL);
+    }
+
+    if (context->capabilities & IBUS_CAP_FOCUS) {
+        g_signal_emit (context,
+                       context_signals[SET_CURSOR_LOCATION],
+                       0,
+                       x, y, w, h,
+                       NULL);
+    }
+
+    reply = ibus_message_new_method_return (message);
+    return reply;
+}
+
+static IBusMessage *
+_ic_set_cursor_object (BusInputContext  *context,
+                       IBusMessage      *message,
+                       BusConnection    *connection)
+{
+    g_assert (BUS_IS_INPUT_CONTEXT (context));
+    g_assert (message != NULL);
+    g_assert (BUS_IS_CONNECTION (connection));
+
+    gboolean retval;
+    IBusCursorLocation *cursor = NULL;
+    IBusError *error = NULL;
+    IBusMessage *reply;
+    gint x, y, w, h;
+
+    retval = ibus_message_get_args (message, &error,
+                IBUS_TYPE_CURSOR_LOCATION, &cursor,
+                G_TYPE_INVALID);
+
+    if (!retval) {
+        reply = ibus_message_new_error (message,
+                                        error->name,
+                                        error->message);
+        ibus_error_free (error);
+        return reply;
+    }
+
+    context->x = x = ibus_cursor_location_get_x (cursor);
+    context->y = y = ibus_cursor_location_get_y (cursor);
+    context->w = w = ibus_cursor_location_get_width (cursor);
+    context->h = h = ibus_cursor_location_get_height (cursor);
+    if (context->cursor)
+        g_object_unref (context->cursor);
+    if (cursor)
+        context->cursor = g_object_ref_sink (cursor);
+    else
+        context->cursor = NULL;
 
     if (context->has_focus && context->enabled && context->engine) {
-        bus_engine_proxy_set_cursor_location (context->engine, x, y, w, h);
+        bus_engine_proxy_set_cursor_location (context->engine,
+                                              x, y, w, h, cursor);
     }
 
     if (context->capabilities & IBUS_CAP_FOCUS) {
         g_signal_emit (context,
                        context_signals[SET_CURSOR_LOCATION],
                        0,
-                       x,
-                       y,
-                       w,
-                       h);
+                       x, y, w, h,
+                       cursor);
     }
 
     reply = ibus_message_new_method_return (message);
@@ -1121,6 +1188,7 @@ bus_input_context_ibus_message (BusInput
         /* IBus interface */
         { IBUS_INTERFACE_INPUT_CONTEXT, "ProcessKeyEvent",   _ic_process_key_event },
         { IBUS_INTERFACE_INPUT_CONTEXT, "SetCursorLocation", _ic_set_cursor_location },
+        { IBUS_INTERFACE_INPUT_CONTEXT, "SetCursorObject",   _ic_set_cursor_object },
         { IBUS_INTERFACE_INPUT_CONTEXT, "FocusIn",           _ic_focus_in },
         { IBUS_INTERFACE_INPUT_CONTEXT, "FocusOut",          _ic_focus_out },
         { IBUS_INTERFACE_INPUT_CONTEXT, "Reset",             _ic_reset },
@@ -1193,7 +1261,10 @@ bus_input_context_focus_in (BusInputCont
         bus_engine_proxy_focus_in (context->engine);
         bus_engine_proxy_enable (context->engine);
         bus_engine_proxy_set_capabilities (context->engine, context->capabilities);
-        bus_engine_proxy_set_cursor_location (context->engine, context->x, context->y, context->w, context->h);
+        bus_engine_proxy_set_cursor_location (context->engine,
+                                              context->x, context->y,
+                                              context->w, context->h,
+                                              context->cursor);
     }
 
     if (context->capabilities & IBUS_CAP_FOCUS) {
@@ -1894,7 +1965,10 @@ bus_input_context_enable (BusInputContex
         bus_engine_proxy_enable (context->engine);
         bus_engine_proxy_focus_in (context->engine);
         bus_engine_proxy_set_capabilities (context->engine, context->capabilities);
-        bus_engine_proxy_set_cursor_location (context->engine, context->x, context->y, context->w, context->h);
+        bus_engine_proxy_set_cursor_location (context->engine,
+                                              context->x, context->y,
+                                              context->w, context->h,
+                                              context->cursor);
     }
     bus_input_context_send_signal (context,
                                    "Enabled",
@@ -2012,7 +2086,10 @@ bus_input_context_set_engine (BusInputCo
             bus_engine_proxy_focus_in (context->engine);
             bus_engine_proxy_enable (context->engine);
             bus_engine_proxy_set_capabilities (context->engine, context->capabilities);
-            bus_engine_proxy_set_cursor_location (context->engine, context->x, context->y, context->w, context->h);
+            bus_engine_proxy_set_cursor_location (context->engine,
+                                                  context->x, context->y,
+                                                  context->w, context->h,
+                                                  context->cursor);
         }
     }
     g_signal_emit (context,
--- ibus-1.3.4/bus/inputcontext.h.zaphod	2010-04-22 16:36:16.000000000 +0900
+++ ibus-1.3.4/bus/inputcontext.h	2018-02-26 12:25:01.173973648 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* bus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2017 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -67,6 +68,7 @@ struct _BusInputContext {
     gint y;
     gint w;
     gint h;
+    IBusCursorLocation *cursor;
 
     /* prev key event */
     guint prev_keyval;
--- ibus-1.3.4/bus/panelproxy.c.zaphod	2010-05-27 11:42:49.000000000 +0900
+++ ibus-1.3.4/bus/panelproxy.c	2018-02-26 19:37:55.416728155 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2018 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -296,15 +297,31 @@ failed:
 
 
 
+/* Send both "SetCursorLocation" and "SetCursorObject" signal for the
+ * back and forward compatibilities.
+ */
 void
-bus_panel_proxy_set_cursor_location (BusPanelProxy *panel,
-                                     gint           x,
-                                     gint           y,
-                                     gint           w,
-                                     gint           h)
+bus_panel_proxy_set_cursor_location (BusPanelProxy      *panel,
+                                     gint                x,
+                                     gint                y,
+                                     gint                w,
+                                     gint                h,
+                                     IBusCursorLocation *cursor)
 {
     g_assert (BUS_IS_PANEL_PROXY (panel));
 
+    if (cursor) {
+        cursor = g_object_ref (cursor);
+    } else {
+        cursor = ibus_cursor_location_new ("x", x, "y", y,
+                                           "width", w, "height", h,
+                                           "display-name", "",
+                                           NULL);
+    }
+    ibus_proxy_call ((IBusProxy *) panel,
+                     "SetCursorObject",
+                     IBUS_TYPE_CURSOR_LOCATION, &cursor,
+                     G_TYPE_INVALID);
     ibus_proxy_call ((IBusProxy *) panel,
                      "SetCursorLocation",
                      G_TYPE_INT, &x,
@@ -312,6 +329,7 @@ bus_panel_proxy_set_cursor_location (Bus
                      G_TYPE_INT, &w,
                      G_TYPE_INT, &h,
                      G_TYPE_INVALID);
+    g_object_unref (cursor);
 }
 
 void
@@ -457,19 +475,20 @@ DEFINE_FUNCTION (StateChanged, state_cha
 #undef DEFINE_FUNCTION
 
 static void
-_context_set_cursor_location_cb (BusInputContext *context,
-                                 gint             x,
-                                 gint             y,
-                                 gint             w,
-                                 gint             h,
-                                 BusPanelProxy   *panel)
+_context_set_cursor_location_cb (BusInputContext    *context,
+                                 gint                x,
+                                 gint                y,
+                                 gint                w,
+                                 gint                h,
+                                 IBusCursorLocation *cursor,
+                                 BusPanelProxy      *panel)
 {
     g_assert (BUS_IS_INPUT_CONTEXT (context));
     g_assert (BUS_IS_PANEL_PROXY (panel));
 
     g_return_if_fail (panel->focused_context == context);
 
-    bus_panel_proxy_set_cursor_location (panel, x, y, w, h);
+    bus_panel_proxy_set_cursor_location (panel, x, y, w, h, cursor);
 }
 
 static void
--- ibus-1.3.4/bus/panelproxy.h.zaphod	2010-01-10 04:27:21.000000000 +0900
+++ ibus-1.3.4/bus/panelproxy.h	2018-02-26 12:25:01.173973648 +0900
@@ -84,7 +84,9 @@ void             bus_panel_proxy_set_cur
                                                      gint32              x,
                                                      gint32              y,
                                                      gint32              w,
-                                                     gint32              h);
+                                                     gint32              h,
+                                                     IBusCursorLocation
+                                                                       *cursor);
 void             bus_panel_proxy_update_preedit_text(BusPanelProxy      *panel,
                                                      IBusText           *text,
                                                      guint               cursor_pos,
--- ibus-1.3.4/client/gtk2/ibusimcontext.c.zaphod	2018-02-26 12:25:01.164973691 +0900
+++ ibus-1.3.4/client/gtk2/ibusimcontext.c	2018-02-26 22:08:15.696720689 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2018 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -60,7 +61,6 @@ struct _IBusIMContext {
     gboolean         has_focus;
 
     gint             caps;
-
 };
 
 struct _IBusIMContextClass {
@@ -662,7 +662,11 @@ _set_cursor_location_internal (GtkIMCont
 {
     IBusIMContext *ibusimcontext = IBUS_IM_CONTEXT (context);
     GdkRectangle area;
+    GdkDisplay *display = NULL;
+    Display *xdisplay = NULL;
+    gchar *display_name = NULL;
     gint x, y;
+    IBusCursorLocation *cursor;
 
     if(ibusimcontext->client_window == NULL || ibusimcontext->ibuscontext == NULL) {
         return;
@@ -679,11 +683,28 @@ _set_cursor_location_internal (GtkIMCont
     gdk_window_get_origin (ibusimcontext->client_window, &x, &y);
     area.x += x;
     area.y += y;
-    ibus_input_context_set_cursor_location (ibusimcontext->ibuscontext,
-                                            area.x,
-                                            area.y,
-                                            area.width,
-                                            area.height);
+    display = gdk_window_get_display (ibusimcontext->client_window);
+#if GTK_CHECK_VERSION (3, 0, 0)
+    if (GDK_IS_X11_DISPLAY (display)) {
+        xdisplay = gdk_x11_display_get_xdisplay (GDK_X11_DISPLAY (display));
+        display_name = g_strdup (DisplayString (xdisplay));
+    }
+#else
+    xdisplay = GDK_DISPLAY_XDISPLAY (display);
+    display_name = g_strdup (DisplayString (xdisplay));
+#endif
+    if (display_name == NULL)
+        display_name = g_strdup ("");
+    cursor = ibus_cursor_location_new ("x", area.x,
+                                       "y", area.y,
+                                       "width", area.width,
+                                       "height", area.height,
+                                       "display-name", display_name,
+                                       NULL);
+    ibus_input_context_set_cursor_object (ibusimcontext->ibuscontext,
+                                          cursor);
+    g_object_unref (cursor);
+    g_free (display_name);
 }
 
 static void
--- ibus-1.3.4/ibus/Makefile.am.zaphod	2010-05-18 10:26:15.000000000 +0900
+++ ibus-1.3.4/ibus/Makefile.am	2018-02-26 12:25:01.173973648 +0900
@@ -3,7 +3,8 @@
 # ibus - The Input Bus
 #
 # Copyright (c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
-# Copyright (c) 2007-2010 Red Hat, Inc.
+# Copyright (c) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright (c) 2007-2017 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
@@ -50,6 +51,7 @@ ibus_PYTHON = \
 	observedpath.py \
 	utility.py \
 	config.py \
+	cursor.py \
 	$(NULL)
 
 nodist_ibus_PYTHON = \
--- ibus-1.3.4/ibus/__init__.py.zaphod	2010-01-10 04:27:09.000000000 +0900
+++ ibus-1.3.4/ibus/__init__.py	2018-02-26 12:25:01.173973648 +0900
@@ -41,4 +41,5 @@ from text import *
 from observedpath import *
 from enginedesc import *
 from component import *
+from cursor import *
 from _config import *
--- ibus-1.3.4/ibus/cursor.py.zaphod	2018-02-26 12:25:01.173973648 +0900
+++ ibus-1.3.4/ibus/cursor.py	2018-02-26 22:16:31.738044111 +0900
@@ -0,0 +1,88 @@
+# vim:set et sts=4 sw=4:
+#
+# ibus - The Input Bus
+#
+# Copyright (c) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright (c) 2017-2018 Red Hat, Inc.
+#
+# This library is free software; you can redistribute it and/or
+# modify it under the terms of the GNU Lesser General Public
+# License as published by the Free Software Foundation; either
+# version 2 of the License, or (at your option) any later version.
+#
+# This library is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public
+# License along with this program; if not, write to the
+# Free Software Foundation, Inc., 59 Temple Place, Suite 330,
+# Boston, MA  02111-1307  USA
+
+__all__ = (
+        "CursorLocation",
+    )
+
+import dbus
+from exception import IBusException
+from serializable import *
+from attribute import AttrList
+
+class CursorLocation(Serializable):
+    __gtype_name__ = "PYIBusCursorLocation"
+    __NAME__ = "IBusCursorLocation"
+    def __init__ (self, x=0, y=0, width=0, height=0, display_name=""):
+        super(CursorLocation, self).__init__()
+        self.__x = x
+        self.__y = y
+        self.__width = width
+        self.__height = height
+        self.__display_name = display_name
+
+    def get_x(self):
+        return self.__x
+
+    def get_y(self):
+        return self.__y
+
+    def get_width(self):
+        return self.__width
+
+    def get_height(self):
+        return self.__height
+
+    def get_display_name(self):
+        return self.__display_name
+
+    x            = property(get_x)
+    y            = property(get_y)
+    width        = property(get_width)
+    height       = property(get_height)
+    display_name = property(get_display_name)
+
+    def serialize(self, struct):
+        super(CursorLocation, self).serialize(struct)
+        struct.append (dbus.Int32(self.__x))
+        struct.append (dbus.Int32(self.__y))
+        struct.append (dbus.Int32(self.__width))
+        struct.append (dbus.Int32(self.__height))
+        struct.append (dbus.String(self.__display_name))
+
+    def deserialize(self, struct):
+        super(CursorLocation, self).deserialize(struct)
+
+        self.__x = int(struct.pop(0))
+        self.__y = int(struct.pop(0))
+        self.__width = int(struct.pop(0))
+        self.__height = int(struct.pop(0))
+        self.__display_name = str(struct.pop(0))
+
+def test():
+    cursor = CursorLocation(x=10, y=20, width=100, height=50,
+                            display_name=":0.0")
+    value = serialize_object(cursor)
+    cursor = deserialize_object(value)
+
+if __name__ == "__main__":
+    test()
--- ibus-1.3.4/ibus/engine.py.zaphod	2010-03-25 16:29:20.000000000 +0900
+++ ibus-1.3.4/ibus/engine.py	2018-02-26 22:16:50.405019825 +0900
@@ -3,7 +3,8 @@
 # ibus - The Input Bus
 #
 # Copyright (c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
-# Copyright (c) 2007-2010 Red Hat, Inc.
+# Copyright (c) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright (c) 2007-2018 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
@@ -46,6 +47,9 @@ class EngineBase(object.Object):
     def set_cursor_location(self, x, y, w, h):
         pass
 
+    def set_cursor_object(self, cursor):
+        pass
+
     def set_capabilities(self, cap):
         pass
 
@@ -163,6 +167,10 @@ class EngineProxy(interface.IEngine):
     def SetCursorLocation(self, x, y, w, h):
         return self.__engine.set_cursor_location(x, y, w, h)
 
+    def SetCursorObject(self, cursor):
+        cursor = serializable.deserialize_object(cursor)
+        return self.__engine.set_cursor_object(cursor)
+
     def SetCapabilities(self, caps):
         return self.__engine.set_capabilities(caps)
 
--- ibus-1.3.4/ibus/interface/iengine.py.zaphod	2010-03-25 16:29:20.000000000 +0900
+++ ibus-1.3.4/ibus/interface/iengine.py	2018-02-26 12:25:01.173973648 +0900
@@ -3,6 +3,7 @@
 # ibus - The Input Bus
 #
 # Copyright(c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
+# Copyright(c) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
 # Copyright(c) 2007-2010 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
@@ -50,6 +51,9 @@ class IEngine(dbus.service.Object):
     @method(in_signature="iiii")
     def SetCursorLocation(self, x, y, w, h): pass
 
+    @method(in_signature="v")
+    def SetCursorObject(self, cursor): pass
+
     @method(in_signature="u")
     def SetCapabilities(self, cap): pass
 
--- ibus-1.3.4/ibus/interface/ipanel.py.zaphod	2010-01-10 04:27:09.000000000 +0900
+++ ibus-1.3.4/ibus/interface/ipanel.py	2018-02-26 12:25:01.173973648 +0900
@@ -3,7 +3,8 @@
 # ibus - The Input Bus
 #
 # Copyright(c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
-# Copyright(c) 2007-2010 Red Hat, Inc.
+# Copyright(c) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright(c) 2007-2017 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
@@ -45,6 +46,9 @@ class IPanel(dbus.service.Object):
     @method(in_signature="iiii")
     def SetCursorLocation(self, x, y, w, h): pass
 
+    @method(in_signature="v")
+    def SetCursorObject(self, cursor): pass
+
     @method(in_signature="vub")
     def UpdatePreeditText(self, text, cursor_pos, visible): pass
 
--- ibus-1.3.4/ibus/panel.py.zaphod	2010-01-10 04:27:09.000000000 +0900
+++ ibus-1.3.4/ibus/panel.py	2018-02-26 22:17:05.650995249 +0900
@@ -3,7 +3,8 @@
 # ibus - The Input Bus
 #
 # Copyright (c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
-# Copyright (c) 2007-2010 Red Hat, Inc.
+# Copyright (c) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright (c) 2007-2018 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
@@ -59,6 +60,9 @@ class PanelBase(Object):
     def set_cursor_location(self, x, y, w, h):
         pass
 
+    def set_cursor_object(self, cursor):
+        pass
+
     def update_preedit_text(self, text, cursor_pos, visible):
         pass
 
@@ -170,6 +174,10 @@ class PanelProxy(interface.IPanel):
     def SetCursorLocation(self, x, y, w, h):
         self.__panel.set_cursor_location(x, y, w, h)
 
+    def SetCursorObject(self, cursor):
+        cursor = deserialize_object(cursor)
+        self.__panel.set_cursor_object(cursor)
+
     def UpdatePreeditText(self, text, cursor_pos, visible):
         text = deserialize_object(text)
         self.__panel.update_preedit_text(text, cursor_pos, visible)
--- ibus-1.3.4/src/ibusengine.c.zaphod	2010-05-27 11:42:49.000000000 +0900
+++ ibus-1.3.4/src/ibusengine.c	2018-02-26 12:25:01.173973648 +0900
@@ -44,6 +44,7 @@ enum {
     PROPERTY_SHOW,
     PROPERTY_HIDE,
     CANDIDATE_CLICKED,
+    SET_CURSOR_OBJECT,
     LAST_SIGNAL,
 };
 
@@ -92,6 +93,9 @@ static void     ibus_engine_set_cursor_l
                                              gint                y,
                                              gint                w,
                                              gint                h);
+static void     ibus_engine_set_cursor_object
+                                            (IBusEngine         *engine,
+                                             IBusCursorLocation *cursor);
 static void     ibus_engine_set_capabilities
                                             (IBusEngine         *engine,
                                              guint               caps);
@@ -165,6 +169,7 @@ ibus_engine_class_init (IBusEngineClass 
     klass->property_show        = ibus_engine_property_show;
     klass->property_hide        = ibus_engine_property_hide;
     klass->set_cursor_location  = ibus_engine_set_cursor_location;
+    klass->set_cursor_object    = ibus_engine_set_cursor_object;
     klass->set_capabilities     = ibus_engine_set_capabilities;
 
 
@@ -356,6 +361,29 @@ ibus_engine_class_init (IBusEngineClass 
             G_TYPE_INT);
 
     /**
+     * IBusEngine::set-cursor-object:
+     * @engine: An #IBusEngine.
+     * @cursor: An #IBusCursorLocation
+     *
+     * Emitted when the location of IME is set.
+     * Implement the member function set_cursor_object() in extended class to
+     * receive this signal.
+     *
+     * See also:  ibus_input_context_set_cursor_varargs().
+     * <note><para>Argument @user_data is ignored in this function.</para></note>
+     */
+    engine_signals[SET_CURSOR_OBJECT] =
+        g_signal_new (I_("set-cursor-object"),
+            G_TYPE_FROM_CLASS (gobject_class),
+            G_SIGNAL_RUN_LAST,
+            G_STRUCT_OFFSET (IBusEngineClass, set_cursor_object),
+            NULL, NULL,
+            ibus_marshal_VOID__OBJECT,
+            G_TYPE_NONE,
+            1,
+            IBUS_TYPE_CURSOR_LOCATION);
+
+    /**
      * IBusEngine::set-capabilities:
      * @engine: An IBusEngine.
      * @caps: Capabilities flags of IBusEngine, see #IBusCapabilite
@@ -850,6 +878,40 @@ ibus_engine_ibus_message (IBusEngine    
                 reply = ibus_message_new_method_return (message);
             }
         }
+        else if (g_strcmp0 (name, "SetCursorObject") == 0) {
+            IBusCursorLocation *cursor = NULL;
+
+            retval = ibus_message_get_args (message,
+                                            &error,
+                                            IBUS_TYPE_CURSOR_LOCATION, &cursor,
+                                            G_TYPE_INVALID);
+            if (!retval) {
+                reply = ibus_message_new_error_printf (message,
+                            DBUS_ERROR_INVALID_ARGS,
+                            "%s.%s: Can not match signature (v) of method",
+                            IBUS_INTERFACE_ENGINE,
+                            "SetCursorObject");
+                ibus_error_free (error);
+            }
+            else {
+                cursor = g_object_ref_sink (cursor);
+
+                engine->cursor_area.x = ibus_cursor_location_get_x (cursor);
+                engine->cursor_area.y = ibus_cursor_location_get_y (cursor);
+                engine->cursor_area.width =
+                        ibus_cursor_location_get_width (cursor);
+                engine->cursor_area.height =
+                        ibus_cursor_location_get_height (cursor);
+
+                g_signal_emit (engine,
+                               engine_signals[SET_CURSOR_OBJECT],
+                               0,
+                               cursor);
+
+                reply = ibus_message_new_method_return (message);
+                g_object_unref (cursor);
+            }
+        }
         else if (g_strcmp0 (name, "SetCapabilities") == 0) {
             guint caps;
 
@@ -942,6 +1004,13 @@ ibus_engine_set_cursor_location (IBusEng
 }
 
 static void
+ibus_engine_set_cursor_object (IBusEngine         *engine,
+                               IBusCursorLocation *cursor)
+{
+    // g_debug ("set-cursor-location (%d, %d, %d, %d)", x, y, w, h);
+}
+
+static void
 ibus_engine_set_capabilities (IBusEngine *engine,
                               guint       caps)
 {
--- ibus-1.3.4/src/ibusengine.h.zaphod	2010-04-22 16:36:16.000000000 +0900
+++ ibus-1.3.4/src/ibusengine.h	2018-02-26 12:25:01.173973648 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2017 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -33,6 +34,7 @@
 #define __IBUS_ENGINE_H_
 
 #include <dbus/dbus.h>
+#include "ibusinputcontext.h"
 #include "ibusservice.h"
 #include "ibusattribute.h"
 #include "ibuslookuptable.h"
@@ -124,10 +126,13 @@ struct _IBusEngineClass {
                                      guint           index,
                                      guint           button,
                                      guint           state);
+    void        (* set_cursor_object)
+                                    (IBusEngine     *engine,
+                                     IBusCursorLocation *cursor);
 
     /*< private >*/
     /* padding */
-    gpointer pdummy[8];
+    gpointer pdummy[7];
 };
 
 GType        ibus_engine_get_type       (void);
--- ibus-1.3.4/src/ibusinputcontext.c.zaphod	2018-02-26 12:25:01.164973691 +0900
+++ ibus-1.3.4/src/ibusinputcontext.c	2018-02-26 22:17:17.743982318 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2018 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -25,10 +26,21 @@
 #include "ibuslookuptable.h"
 #include "ibusproplist.h"
 
+#define IBUS_CURSOR_LOCATION_GET_PRIVATE(o)  \
+   (G_TYPE_INSTANCE_GET_PRIVATE ((o), IBUS_TYPE_CURSOR_LOCATION, IBusCursorLocationPrivate))
 #define IBUS_INPUT_CONTEXT_GET_PRIVATE(o)  \
    (G_TYPE_INSTANCE_GET_PRIVATE ((o), IBUS_TYPE_INPUT_CONTEXT, IBusInputContextPrivate))
 
 enum {
+    PROP_0 = 0,
+    PROP_X,
+    PROP_Y,
+    PROP_WIDTH,
+    PROP_HEIGHT,
+    PROP_DISPLAY_NAME
+};
+
+enum {
     ENABLED,
     DISABLED,
     COMMIT_TEXT,
@@ -54,6 +66,14 @@ enum {
 
 
 /* BusInputContextPriv */
+struct _IBusCursorLocationPrivate {
+    int    x;
+    int    y;
+    int    width;
+    int    height;
+    gchar *display_name;
+};
+
 struct _IBusInputContextPrivate {
     gboolean own;
 };
@@ -63,11 +83,344 @@ static guint            context_signals[
 // static guint            context_signals[LAST_SIGNAL] = { 0 };
 
 /* functions prototype */
+static void     ibus_cursor_location_destroy    (IBusCursorLocation    *cursor);
+static void     ibus_cursor_location_set_property
+                                                (IBusCursorLocation    *desc,
+                                                 guint                  prop_id,
+                                                 const GValue          *value,
+                                                 GParamSpec            *pspec);
+static void     ibus_cursor_location_get_property
+                                                (IBusCursorLocation    *desc,
+                                                 guint                  prop_id,
+                                                 GValue                *value,
+                                                 GParamSpec            *pspec);
+static gboolean ibus_cursor_location_serialize  (IBusCursorLocation    *cursor,
+                                                 IBusMessageIter       *iter);
+static gboolean ibus_cursor_location_deserialize
+                                                (IBusCursorLocation    *cursor,
+                                                 IBusMessageIter       *iter);
+static gboolean ibus_cursor_location_copy       (IBusCursorLocation    *dest,
+                                                 const IBusCursorLocation
+                                                                       *src);
 static void     ibus_input_context_real_destroy (IBusInputContext       *context);
 static gboolean ibus_input_context_ibus_signal  (IBusProxy              *proxy,
                                                  DBusMessage            *message);
 
 G_DEFINE_TYPE (IBusInputContext, ibus_input_context, IBUS_TYPE_PROXY)
+G_DEFINE_TYPE (IBusCursorLocation, ibus_cursor_location, IBUS_TYPE_SERIALIZABLE)
+
+static void
+ibus_cursor_location_class_init (IBusCursorLocationClass *klass)
+{
+    GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
+    IBusObjectClass *object_class = IBUS_OBJECT_CLASS (klass);
+    IBusSerializableClass *serializable_class = IBUS_SERIALIZABLE_CLASS (klass);
+
+    ibus_cursor_location_parent_class =
+            (IBusSerializableClass *) g_type_class_peek_parent (klass);
+
+    g_type_class_add_private (klass, sizeof (IBusCursorLocationPrivate));
+
+    object_class->destroy =
+            (IBusObjectDestroyFunc) ibus_cursor_location_destroy;
+
+    gobject_class->set_property =
+            (GObjectSetPropertyFunc) ibus_cursor_location_set_property;
+    gobject_class->get_property =
+            (GObjectGetPropertyFunc) ibus_cursor_location_get_property;
+    serializable_class->serialize   =
+            (IBusSerializableSerializeFunc) ibus_cursor_location_serialize;
+    serializable_class->deserialize =
+            (IBusSerializableDeserializeFunc) ibus_cursor_location_deserialize;
+    serializable_class->copy        =
+            (IBusSerializableCopyFunc) ibus_cursor_location_copy;
+
+    g_string_append (serializable_class->signature, "iiiis");
+
+    /* install properties */
+    /**
+     * IBusCursorLocation:x:
+     *
+     * X coordiante of the cursor location
+     */
+    g_object_class_install_property (gobject_class,
+                    PROP_X,
+                    g_param_spec_int ("x",
+                        "X coordinate",
+                        "X coordiante of the cursor location",
+                        G_MININT,
+                        G_MAXINT,
+                        0,
+                        G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+    /**
+     * IBusCursorLocation:y:
+     *
+     * Y coordiante of the cursor location
+     */
+    g_object_class_install_property (gobject_class,
+                    PROP_Y,
+                    g_param_spec_int ("y",
+                        "Y coordinate",
+                        "Y coordiante of the cursor location",
+                        G_MININT,
+                        G_MAXINT,
+                        0,
+                        G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+    /**
+     * IBusCursorLocation:width:
+     *
+     * The width of the cursor
+     */
+    g_object_class_install_property (gobject_class,
+                    PROP_WIDTH,
+                    g_param_spec_int ("width",
+                        "cursor width",
+                        "The width of the cursor",
+                        G_MININT,
+                        G_MAXINT,
+                        0,
+                        G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+    /**
+     * IBusCursorLocation:height:
+     *
+     * The width of the cursor
+     */
+    g_object_class_install_property (gobject_class,
+                    PROP_HEIGHT,
+                    g_param_spec_int ("height",
+                        "cursor height",
+                        "The height of the cursor",
+                        G_MININT,
+                        G_MAXINT,
+                        0,
+                        G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+    /**
+     * IBusCursorLocation:display_name:
+     *
+     * The value of $DISPLAY
+     */
+    g_object_class_install_property (gobject_class,
+                    PROP_DISPLAY_NAME,
+                    g_param_spec_string ("display-name",
+                        "display name",
+                        "The value of $DISPLAY",
+                        "",
+                        G_PARAM_READWRITE | G_PARAM_CONSTRUCT_ONLY));
+}
+
+static void
+ibus_cursor_location_init (IBusCursorLocation *cursor)
+{
+    cursor->priv = IBUS_CURSOR_LOCATION_GET_PRIVATE (cursor);
+}
+
+static void
+ibus_cursor_location_destroy (IBusCursorLocation *cursor)
+{
+    g_free (cursor->priv->display_name);
+    cursor->priv->display_name = NULL;
+
+    IBUS_OBJECT_CLASS (ibus_cursor_location_parent_class)->
+            destroy ((IBusObject *)cursor);
+}
+
+static void
+ibus_cursor_location_set_property (IBusCursorLocation *cursor,
+                                   guint               prop_id,
+                                   const GValue       *value,
+                                   GParamSpec         *pspec)
+{
+    switch (prop_id) {
+    case PROP_X:
+        cursor->priv->x = g_value_get_int (value);
+        break;
+    case PROP_Y:
+        cursor->priv->y = g_value_get_int (value);
+        break;
+    case PROP_WIDTH:
+        cursor->priv->width = g_value_get_int (value);
+        break;
+    case PROP_HEIGHT:
+        cursor->priv->height= g_value_get_int (value);
+        break;
+    case PROP_DISPLAY_NAME:
+        g_assert (cursor->priv->display_name == NULL);
+        cursor->priv->display_name = g_value_dup_string (value);
+        break;
+    default:
+        G_OBJECT_WARN_INVALID_PROPERTY_ID (cursor, prop_id, pspec);
+    }
+}
+
+static void
+ibus_cursor_location_get_property (IBusCursorLocation *cursor,
+                                   guint               prop_id,
+                                   GValue             *value,
+                                   GParamSpec         *pspec)
+{
+    switch (prop_id) {
+    case PROP_X:
+        g_value_set_int (value, ibus_cursor_location_get_x (cursor));
+        break;
+    case PROP_Y:
+        g_value_set_int (value, ibus_cursor_location_get_y (cursor));
+        break;
+    case PROP_WIDTH:
+        g_value_set_int (value, ibus_cursor_location_get_width (cursor));
+        break;
+    case PROP_HEIGHT:
+        g_value_set_int (value, ibus_cursor_location_get_height (cursor));
+        break;
+    case PROP_DISPLAY_NAME:
+        g_value_set_string (value,
+                            ibus_cursor_location_get_display_name (cursor));
+        break;
+    default:
+        G_OBJECT_WARN_INVALID_PROPERTY_ID (cursor, prop_id, pspec);
+    }
+}
+
+
+static gboolean
+ibus_cursor_location_serialize (IBusCursorLocation *cursor,
+                                IBusMessageIter    *iter)
+{
+    gboolean retval;
+    IBusCursorLocationPrivate *priv;
+
+    retval = IBUS_SERIALIZABLE_CLASS (ibus_cursor_location_parent_class)->
+            serialize ((IBusSerializable *)cursor, iter);
+    g_return_val_if_fail (retval, FALSE);
+
+    priv = cursor->priv;
+    retval = ibus_message_iter_append (iter, G_TYPE_INT, &priv->x);
+    g_return_val_if_fail (retval, FALSE);
+    retval = ibus_message_iter_append (iter, G_TYPE_INT, &priv->y);
+    g_return_val_if_fail (retval, FALSE);
+    retval = ibus_message_iter_append (iter, G_TYPE_INT, &priv->width);
+    g_return_val_if_fail (retval, FALSE);
+    retval = ibus_message_iter_append (iter, G_TYPE_INT, &priv->height);
+    g_return_val_if_fail (retval, FALSE);
+    retval = ibus_message_iter_append (iter, G_TYPE_STRING,
+                                       &priv->display_name);
+    g_return_val_if_fail (retval, FALSE);
+
+    return TRUE;
+}
+
+static gboolean
+ibus_cursor_location_deserialize (IBusCursorLocation *cursor,
+                                  IBusMessageIter    *iter)
+{
+    gboolean retval;
+    IBusCursorLocationPrivate *priv;
+    gchar *str;
+
+    retval = IBUS_SERIALIZABLE_CLASS (ibus_cursor_location_parent_class)->
+            deserialize ((IBusSerializable *)cursor, iter);
+    g_return_val_if_fail (retval, FALSE);
+
+    priv = cursor->priv;
+    retval = ibus_message_iter_get (iter, G_TYPE_INT, &priv->x);
+    g_return_val_if_fail (retval, FALSE);
+    ibus_message_iter_next (iter);
+    retval = ibus_message_iter_get (iter, G_TYPE_INT, &priv->y);
+    g_return_val_if_fail (retval, FALSE);
+    ibus_message_iter_next (iter);
+    retval = ibus_message_iter_get (iter, G_TYPE_INT, &priv->width);
+    g_return_val_if_fail (retval, FALSE);
+    ibus_message_iter_next (iter);
+    retval = ibus_message_iter_get (iter, G_TYPE_INT, &priv->height);
+    g_return_val_if_fail (retval, FALSE);
+    ibus_message_iter_next (iter);
+    retval = ibus_message_iter_get (iter, G_TYPE_STRING, &str);
+    g_return_val_if_fail (retval, FALSE);
+    ibus_message_iter_next (iter);
+
+    g_free (priv->display_name);
+    priv->display_name = g_strdup (str);
+
+    return TRUE;
+}
+
+static gboolean
+ibus_cursor_location_copy (IBusCursorLocation       *dest,
+                           const IBusCursorLocation *src)
+{
+    gboolean retval;
+    IBusCursorLocationPrivate *priv_dest;
+    IBusCursorLocationPrivate *priv_src;
+
+    retval = IBUS_SERIALIZABLE_CLASS (ibus_cursor_location_parent_class)->
+            copy ( (IBusSerializable *)dest,
+                   (IBusSerializable *)src);
+    g_return_val_if_fail (retval, FALSE);
+
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (dest), FALSE);
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (src), FALSE);
+    priv_dest = dest->priv;
+    priv_src = src->priv;
+
+    priv_dest->x = priv_src->x;
+    priv_dest->y = priv_src->y;
+    priv_dest->width = priv_src->width;
+    priv_dest->height = priv_src->height;
+    priv_dest->display_name = g_strdup (priv_src->display_name);
+    return TRUE;
+}
+
+IBusCursorLocation *
+ibus_cursor_location_new (const gchar *first_property_name,
+                          ...)
+{
+    va_list var_args;
+    IBusCursorLocation *cursor;
+
+    g_assert (first_property_name);
+
+    va_start (var_args, first_property_name);
+    cursor = (IBusCursorLocation *) g_object_new_valist (IBUS_TYPE_CURSOR_LOCATION,
+                                                         first_property_name,
+                                                         var_args);
+    va_end (var_args);
+
+    return cursor;
+}
+
+int
+ibus_cursor_location_get_x (IBusCursorLocation *cursor)
+{
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (cursor), 0);
+    return cursor->priv->x;
+}
+
+int
+ibus_cursor_location_get_y (IBusCursorLocation *cursor)
+{
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (cursor), 0);
+    return cursor->priv->y;
+}
+
+int
+ibus_cursor_location_get_width (IBusCursorLocation *cursor)
+{
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (cursor), 0);
+    return cursor->priv->width;
+}
+
+int
+ibus_cursor_location_get_height (IBusCursorLocation *cursor)
+{
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (cursor), 0);
+    return cursor->priv->height;
+}
+
+const gchar *
+ibus_cursor_location_get_display_name (IBusCursorLocation *cursor)
+{
+    g_return_val_if_fail (IBUS_IS_CURSOR_LOCATION (cursor), "");
+    return cursor->priv->display_name;
+}
 
 IBusInputContext *
 ibus_input_context_new (const gchar     *path,
@@ -902,6 +1255,74 @@ ibus_input_context_process_key_event_asy
     return processed;
 }
 
+#if 0
+static GVariant *
+cursor_valist_serialize (const gchar     *first_property_name,
+                         va_list          args)
+{
+    GVariantBuilder builder;
+    const gchar *name;
+
+    g_variant_builder_init (&builder, G_VARIANT_TYPE_TUPLE);
+
+    name = first_property_name;
+
+    do {
+        if (!g_strcmp0 (name, "x")) {
+            int x = va_arg (args, int);
+            g_variant_builder_add (&builder, "u", x);
+        }
+        else if (!g_strcmp0 (name, "y")) {
+            int y = va_arg (args, int);
+            g_variant_builder_add (&builder, "u", y);
+        }
+        else if (!g_strcmp0 (name, "width")) {
+            int w = va_arg (args, int);
+            g_variant_builder_add (&builder, "u", w);
+        }
+        else if (!g_strcmp0 (name, "height")) {
+            int h = va_arg (args, int);
+            g_variant_builder_add (&builder, "u", h);
+        }
+        else if (!g_strcmp0 (name, "display_name")) {
+            const gchar *display_name = va_arg (args, const gchar *);
+            g_variant_builder_add (&builder, "s", display_name);
+        }
+        else {
+            g_warning ("cursor_valist_serialize() got a invalid argument: %s",
+                       name);
+        }
+    } while ((name = va_arg (args, const gchar *)));
+
+    return g_variant_builder_end (&builder);
+}
+#endif
+
+void
+ibus_input_context_set_cursor_object (IBusInputContext   *context,
+                                      IBusCursorLocation *cursor)
+{
+    IBusMessage *message;
+    gboolean retval = FALSE;
+
+    g_return_if_fail (cursor != NULL);
+
+    message = ibus_proxy_create_method ((IBusProxy *) context,
+                                        "SetCursorObject");
+    retval = ibus_message_append_args (message,
+                                       IBUS_TYPE_CURSOR_LOCATION, &cursor,
+                                       G_TYPE_INVALID);
+    if (!retval) {
+        ibus_message_unref (message);
+        if (cursor)
+            g_object_unref (cursor);
+        g_return_if_reached ();
+    }
+
+    ibus_proxy_send ((IBusProxy *) context, message);
+    ibus_message_unref (message);
+}
+
 void
 ibus_input_context_set_cursor_location (IBusInputContext *context,
                                         gint32            x,
@@ -1069,4 +1490,3 @@ DEFINE_FUNC(enable, Enable);
 DEFINE_FUNC(disable, Disable);
 
 #undef DEFINE_FUNC
-
--- ibus-1.3.4/src/ibusinputcontext.h.zaphod	2018-02-26 12:25:01.164973691 +0900
+++ ibus-1.3.4/src/ibusinputcontext.h	2018-02-26 22:17:24.091973784 +0900
@@ -1,7 +1,8 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
  * Copyright (C) 2008-2010 Peng Huang <shawn.p.huang@gmail.com>
- * Copyright (C) 2008-2010 Red Hat, Inc.
+ * Copyright (C) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2008-2018 Red Hat, Inc.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -54,10 +55,18 @@
 #define IBUS_INPUT_CONTEXT_GET_CLASS(obj)   \
     (G_TYPE_INSTANCE_GET_CLASS ((obj), IBUS_TYPE_INPUT_CONTEXT, IBusInputContextClass))
 
+#define IBUS_TYPE_CURSOR_LOCATION           \
+    (ibus_cursor_location_get_type ())
+#define IBUS_IS_CURSOR_LOCATION(obj)        \
+    (G_TYPE_CHECK_INSTANCE_TYPE ((obj), IBUS_TYPE_CURSOR_LOCATION))
+
 G_BEGIN_DECLS
 
 typedef struct _IBusInputContext IBusInputContext;
 typedef struct _IBusInputContextClass IBusInputContextClass;
+typedef struct _IBusCursorLocation IBusCursorLocation;
+typedef struct _IBusCursorLocationPrivate IBusCursorLocationPrivate;
+typedef struct _IBusCursorLocationClass IBusCursorLocationClass;
 
 /**
  * IBusInputContext:
@@ -79,6 +88,23 @@ struct _IBusInputContextClass {
 };
 
 /**
+ * IBusCursorLocation:
+ *
+ * A cursor location in input method clients.
+ */
+struct _IBusCursorLocation {
+    IBusSerializable parent;
+    /* instance members */
+    /*< public >*/
+    /*< private >*/
+    IBusCursorLocationPrivate *priv;
+};
+
+struct _IBusCursorLocationClass {
+    IBusSerializableClass parent;
+};
+
+/**
  * IBusInputContextNotifyFunction:
  * @context: An IBusInputContext.
  * @pending: An IBusPendingCall.
@@ -215,6 +241,18 @@ void         ibus_input_context_set_curs
                                              gint32              y,
                                              gint32              w,
                                              gint32              h);
+
+/**
+ * ibus_input_context_set_cursor_object:
+ * @context: An IBusInputContext.
+ * @cursor: An IBusCursorLocation.
+ *
+ * Set the cursor location of IBus input context with an #IBusCursorLocation.
+ */
+void         ibus_input_context_set_cursor_object
+                                            (IBusInputContext   *context,
+                                             IBusCursorLocation *cursor);
+
 /**
  * ibus_input_context_set_capabilities:
  * @context: An IBusInputContext.
@@ -325,6 +363,67 @@ void         ibus_input_context_set_engi
                                              const gchar *name);
 
 
+GType        ibus_cursor_location_get_type  (void);
+
+/**
+ * ibus_cursor_location_new:
+ * @first_property_name: Name of the first property.
+ * @...: the NULL-terminated arguments of the properties and values.
+ *
+ * Creates a new #IBusCursorLocation.
+ * ibus_engine_desc_new() supports the va_list format.
+ * name property is required. e.g.
+ * ibus_engine_desc_new_varargs("x", 100, "y", 200, "width", 100, "height",
+ * 50, NULL)
+ *
+ * Returns: A newly allocated IBusCursorLocation.
+ */
+IBusCursorLocation *
+             ibus_cursor_location_new       (const gchar *first_property_name,
+                                             ...);
+
+/**
+ * ibus_cursor_location_get_x:
+ * @cursor: An IBusCursorLocation
+ *
+ * Returns: X coordiante of the cursor location.
+ */
+int          ibus_cursor_location_get_x     (IBusCursorLocation *cursor);
+
+/**
+ * ibus_cursor_location_get_y:
+ * @cursor: An IBusCursorLocation
+ *
+ * Returns: Y coordiante of the cursor location.
+ */
+int          ibus_cursor_location_get_y     (IBusCursorLocation *cursor);
+
+/**
+ * ibus_cursor_location_get_width:
+ * @cursor: An #IBusCursorLocation
+ *
+ * Returns: the width of the cursor.
+ */
+int          ibus_cursor_location_get_width (IBusCursorLocation *cursor);
+
+/**
+ * ibus_cursor_location_get_height:
+ * @cursor: An #IBusCursorLocation
+ *
+ * Returns: the height of the cursor.
+ */
+int          ibus_cursor_location_get_height
+                                            (IBusCursorLocation *cursor);
+
+/**
+ * ibus_cursor_location_get_display_name:
+ * @cursor: An #IBusCursorLocation
+ *
+ * Returns: the value of $DISPLAY.
+ */
+const gchar *ibus_cursor_location_get_display_name
+                                            (IBusCursorLocation *cursor);
+
 G_END_DECLS
 #endif
 
--- ibus-1.3.4/src/ibusmarshalers.list.zaphod	2010-04-22 16:36:16.000000000 +0900
+++ ibus-1.3.4/src/ibusmarshalers.list	2018-02-26 12:25:01.173973648 +0900
@@ -10,6 +10,7 @@ BOOL:UINT,UINT
 BOOL:UINT,UINT,UINT
 BOOL:ULONG
 VOID:INT,INT,INT,INT
+VOID:INT,INT,INT,INT,OBJECT
 VOID:UINT,UINT
 VOID:INT,UINT
 VOID:UINT,UINT,UINT
--- ibus-1.3.4/src/ibuspanelservice.c.zaphod	2010-05-27 11:42:49.000000000 +0900
+++ ibus-1.3.4/src/ibuspanelservice.c	2018-02-26 22:31:54.710821979 +0900
@@ -1,5 +1,7 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
+ * Copyright (C) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2017-2018 Red Hat, Inc.
  * Copyright (c) 2009, Google Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
@@ -56,6 +58,9 @@ static gboolean ibus_panel_service_set_c
                                                           gint                   w,
                                                           gint                   h,
                                                           IBusError            **error);
+static gboolean ibus_panel_service_set_cursor_object     (IBusPanelService      *panel,
+                                                          IBusCursorLocation    *cursor,
+                                                          IBusError            **error);
 static gboolean ibus_panel_service_update_auxiliary_text (IBusPanelService      *panel,
                                                           IBusText              *text,
                                                           gboolean              visible,
@@ -106,6 +111,7 @@ ibus_panel_service_class_init (IBusPanel
     klass->focus_out             = ibus_panel_service_focus_out;
     klass->register_properties   = ibus_panel_service_register_properties;
     klass->set_cursor_location   = ibus_panel_service_set_cursor_location;
+    klass->set_cursor_object     = ibus_panel_service_set_cursor_object;
     klass->update_lookup_table   = ibus_panel_service_update_lookup_table;
     klass->update_auxiliary_text = ibus_panel_service_update_auxiliary_text;
     klass->update_preedit_text   = ibus_panel_service_update_preedit_text;
@@ -453,6 +459,7 @@ ibus_panel_service_ibus_message (IBusPan
         gboolean retval;
         IBusError *error = NULL;
 
+
         retval = ibus_message_get_args (message,
                                         &error,
                                         G_TYPE_INT, &x,
@@ -476,6 +483,36 @@ ibus_panel_service_ibus_message (IBusPan
             reply = ibus_message_new_method_return (message);
         }
     }
+    else if (ibus_message_is_method_call (message,
+                                          IBUS_INTERFACE_PANEL,
+                                          "SetCursorObject")) {
+        gboolean retval;
+        IBusError *error = NULL;
+        IBusCursorLocation *cursor = NULL;
+
+
+        retval = ibus_message_get_args (message,
+                                        &error,
+                                        IBUS_TYPE_CURSOR_LOCATION, &cursor,
+                                        G_TYPE_INVALID);
+
+        if (retval)
+            cursor = g_object_ref_sink (cursor);
+        if (!retval || !IBUS_PANEL_SERVICE_GET_CLASS (panel)->
+                set_cursor_object(panel,
+                                  cursor,
+                                  &error)) {
+            reply = ibus_message_new_error(message,
+                                           error->name,
+                                           error->message);
+            ibus_error_free (error);
+        }
+        else {
+            reply = ibus_message_new_method_return (message);
+        }
+        if (cursor)
+            g_object_unref (cursor);
+    }
 
     if (reply) {
         ibus_connection_send (connection, reply);
@@ -532,6 +569,14 @@ ibus_panel_service_set_cursor_location (
 }
 
 static gboolean
+ibus_panel_service_set_cursor_object (IBusPanelService    *panel,
+                                      IBusCursorLocation  *cursor,
+                                      IBusError          **error)
+{
+    return ibus_panel_service_not_implemented(panel, error);
+}
+
+static gboolean
 ibus_panel_service_update_auxiliary_text (IBusPanelService *panel,
                                           IBusText         *text,
                                           gboolean          visible,
--- ibus-1.3.4/src/ibuspanelservice.h.zaphod	2010-03-25 16:29:20.000000000 +0900
+++ ibus-1.3.4/src/ibuspanelservice.h	2018-02-26 12:25:01.173973648 +0900
@@ -1,5 +1,7 @@
 /* vim:set et sts=4: */
 /* ibus - The Input Bus
+ * Copyright (C) 2017 Takao Fujiwara <takao.fujiwara1@gmail.com>
+ * Copyright (C) 2017 Red Hat, Inc.
  * Copyright (c) 2009, Google Inc. All rights reserved.
  *
  * This library is free software; you can redistribute it and/or
@@ -29,6 +31,8 @@
 #define __IBUS_PANEL_SERVICE_H_
 
 #include "ibusconnection.h"
+#include "ibusinputcontext.h"
+#include "ibuslookuptable.h"
 #include "ibuslookuptable.h"
 #include "ibusservice.h"
 #include "ibusproplist.h"
@@ -133,10 +137,13 @@ struct _IBusPanelServiceClass {
                                             IBusError             **error);
     gboolean (* state_changed)             (IBusPanelService       *panel,
                                             IBusError             **error);
+    gboolean (* set_cursor_object)         (IBusPanelService       *panel,
+                                            IBusCursorLocation     *cursor,
+                                            IBusError             **error);
 
     /*< private >*/
     /* padding */
-    gpointer pdummy[8];  // We can add 8 pointers without breaking the ABI.
+    gpointer pdummy[7];  // We can add 7 pointers without breaking the ABI.
 };
 
 GType            ibus_panel_service_get_type  (void);
--- ibus-1.3.4/src/ibusproxy.c.zaphod	2010-05-27 11:42:49.000000000 +0900
+++ ibus-1.3.4/src/ibusproxy.c	2018-02-26 12:25:01.173973648 +0900
@@ -586,29 +586,48 @@ ibus_proxy_send (IBusProxy      *proxy,
     return ibus_connection_send (priv->connection, message);
 }
 
+IBusMessage *
+ibus_proxy_create_method (IBusProxy      *proxy,
+                          const gchar    *method)
+{
+    IBusProxyPrivate *priv;
+    IBusMessage *message = NULL;
+
+    g_assert (IBUS_IS_PROXY (proxy));
+
+    priv = IBUS_PROXY_GET_PRIVATE (proxy);
+
+    message = ibus_message_new_method_call (priv->name,
+                                            priv->path,
+                                            priv->interface,
+                                            method);
+
+    return message;
+}
+
 gboolean
 ibus_proxy_call (IBusProxy      *proxy,
                  const gchar    *method,
                  GType           first_arg_type,
                  ...)
 {
-    g_assert (IBUS_IS_PROXY (proxy));
-    g_assert (method != NULL);
-
     va_list args;
     gboolean retval;
     DBusMessage *message;
 
     IBusProxyPrivate *priv;
+
+    g_assert (IBUS_IS_PROXY (proxy));
+    g_assert (method != NULL);
+
     priv = IBUS_PROXY_GET_PRIVATE (proxy);
 
     g_return_val_if_fail (priv->connection, FALSE);
-    g_return_val_if_fail (ibus_connection_is_connected (priv->connection), FALSE);
+    g_return_val_if_fail (ibus_connection_is_connected (priv->connection),
+                          FALSE);
+
+    message = ibus_proxy_create_method (proxy, method);
 
-    message = ibus_message_new_method_call (priv->name,
-                                            priv->path,
-                                            priv->interface,
-                                            method);
     va_start (args, first_arg_type);
     retval = ibus_message_append_args_valist (message,
                                               first_arg_type,
--- ibus-1.3.4/src/ibusproxy.h.zaphod	2010-03-25 16:29:20.000000000 +0900
+++ ibus-1.3.4/src/ibusproxy.h	2018-02-26 12:25:01.173973648 +0900
@@ -113,6 +113,17 @@ gboolean         ibus_proxy_send        
                                              IBusMessage        *message);
 
 /**
+ * ibus_proxy_create_method:
+ * @proxy: An IBusProxy.
+ * @method: A method of the #IBusMessage
+ * @returns: #IBusMessage
+ *
+ * Create an #IBusMessage with @method.
+ */
+IBusMessage *    ibus_proxy_create_method   (IBusProxy          *proxy,
+                                             const gchar        *method);
+
+/**
  * ibus_proxy_call:
  * @proxy: An IBusProxy.
  * @method: The method to be called.
--- ibus-1.3.4/ui/gtk/candidatepanel.py.zaphod	2010-03-26 16:42:01.000000000 +0900
+++ ibus-1.3.4/ui/gtk/candidatepanel.py	2018-02-26 22:17:53.452933321 +0900
@@ -3,7 +3,8 @@
 # ibus - The Input Bus
 #
 # Copyright(c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
-# Copyright(c) 2007-2010 Red Hat, Inc.
+# Copyright(c) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright(c) 2007-2018 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
@@ -24,6 +25,7 @@ import operator
 import gtk
 import gtk.gdk as gdk
 import gobject
+import os
 import pango
 import ibus
 from ibus._gtk import PangoAttrList
@@ -219,14 +221,26 @@ class CandidatePanel(gtk.VBox):
         self.__aux_attrs = pango.AttrList()
         self.__lookup_table = None
 
-        self.__cursor_location = (0, 0)
+        self.__cursor_location = ibus.CursorLocation(x = 0, y = 0,
+                                                     width = 0, height = 0,
+                                                     display_name = "")
         self.__moved_cursor_location = None
+        self.__displays = {}
+        display_name = os.environ['DISPLAY']
+        if display_name == None:
+            display_name = ''
+        self.__displays[display_name] = gdk.display_get_default()
+        if display_name != '':
+            self.__displays[''] = self.__displays[display_name]
 
         self.__recreate_ui()
 
     def __handle_move_end_cb(self, handle):
         # store moved location
-        self.__moved_cursor_location = self.__toplevel.get_position()
+        self.__moved_cursor_location = self.__toplevel.get_position() + \
+                (self.__cursor_location.width,
+                 self.__cursor_location.height,
+                 self.__cursor_location.display_name)
 
     def __recreate_ui(self):
         for w in self:
@@ -428,12 +442,21 @@ class CandidatePanel(gtk.VBox):
         self.__lookup_table.cursor_down()
         self.__refresh_candidates()
 
-    def set_cursor_location(self, x, y):
+    def set_cursor_location(self, cursor):
         # if cursor location is changed, we reset the moved cursor location
-        if self.__cursor_location != (x, y):
-            self.__cursor_location = (x, y)
-            self.__moved_cursor_location = None
-            self.__check_position()
+        if self.__cursor_location != None and \
+           self.__cursor_location.x == cursor.x and \
+           self.__cursor_location.y == cursor.y and \
+           self.__cursor_location.width == cursor.width and \
+           self.__cursor_location.height == cursor.height and \
+           self.__cursor_location.display_name == cursor.display_name:
+            return
+        self.__cursor_location = cursor
+        display_name = cursor.display_name
+        if display_name not in self.__displays and display_name.find(':') >= 0:
+            display = gtk.gdk.Display(display_name = display_name)
+            self.__displays[display_name] = display
+        self.__check_position()
 
     def __check_show_states(self):
         if self.__preedit_visible or \
@@ -484,21 +507,41 @@ class CandidatePanel(gtk.VBox):
 
     def __check_position(self):
         cursor_location = self.__moved_cursor_location or self.__cursor_location
-        bx = cursor_location[0] + self.__toplevel.allocation.width
-        by = cursor_location[1] + self.__toplevel.allocation.height
 
-        root_window = gdk.get_default_root_window()
-        sx, sy = root_window.get_size()
+        cursor_right = cursor_location.x + cursor_location.width
+        cursor_bottom = cursor_location.y + cursor_location.height
+
+        window_right = cursor_right + self.__toplevel.allocation.width
+        window_bottom = cursor_bottom + self.__toplevel.allocation.height
+        display_name = cursor_location.display_name
+
+        if display_name != None and display_name.find(':') >= 0:
+            screen_num = 0
+            display = self.__displays[display_name]
+            screen_name = display_name.split('.')
+            if len(screen_name) > 1:
+                screen_num = int(screen_name[1])
+            screen = display.get_screen(screen_num)
+            self.__toplevel.set_screen(screen)
+        else:
+            screen = gdk.screen_get_default()
+        monitor_num = screen.get_monitor_at_point(cursor_location.x,
+                                                  cursor_location.y)
+        monitor_area = screen.get_monitor_geometry(monitor_num)
+
+        monitor_right = monitor_area.x + monitor_area.width
+        monitor_bottom = monitor_area.y + monitor_area.height
 
-        if bx > sx:
-            x = sx - self.__toplevel.allocation.width
+        if window_right > monitor_right:
+            x = monitor_right - self.__toplevel.allocation.width
         else:
-            x = cursor_location[0]
+            x = cursor_right
 
-        if by > sy:
-            y = sy - self.__toplevel.allocation.height
+        if window_bottom > monitor_bottom:
+            # move the window just above the cursor so the window and a preedit string do not overlap.
+            y = cursor_location.y - self.__toplevel.allocation.height
         else:
-            y = cursor_location[1]
+            y = cursor_bottom
 
         self.move(x, y)
 
--- ibus-1.3.4/ui/gtk/panel.py.zaphod	2010-04-26 11:18:48.000000000 +0900
+++ ibus-1.3.4/ui/gtk/panel.py	2018-02-26 22:18:05.799915691 +0900
@@ -3,7 +3,8 @@
 # ibus - The Input Bus
 #
 # Copyright(c) 2007-2010 Peng Huang <shawn.p.huang@gmail.com>
-# Copyright(c) 2007-2010 Red Hat, Inc.
+# Copyright(c) 2017-2018 Takao Fujiwara <takao.fujiwara1@gmail.com>
+# Copyright(c) 2007-2018 Red Hat, Inc.
 #
 # This library is free software; you can redistribute it and/or
 # modify it under the terms of the GNU Lesser General Public
@@ -121,8 +122,8 @@ class Panel(ibus.PanelBase):
         self.__config_load_show_im_name()
         # self.__bus.request_name(ibus.panel.IBUS_SERVICE_PANEL, 0)
 
-    def set_cursor_location(self, x, y, w, h):
-        self.__candidate_panel.set_cursor_location(x + w, y + h)
+    def set_cursor_object(self, cursor):
+        self.__candidate_panel.set_cursor_location(cursor)
 
     def update_preedit_text(self, text, cursor_pos, visible):
         self.__candidate_panel.update_preedit_text(text, cursor_pos, visible)
